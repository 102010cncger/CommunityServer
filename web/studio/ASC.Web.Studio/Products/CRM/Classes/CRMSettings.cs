/*
 * 
 * (c) Copyright Ascensio System SIA 2010-2014
 * 
 * This program is a free software product.
 * You can redistribute it and/or modify it under the terms of the GNU Affero General Public License
 * (AGPL) version 3 as published by the Free Software Foundation. 
 * In accordance with Section 7(a) of the GNU AGPL its Section 15 shall be amended to the effect 
 * that Ascensio System SIA expressly excludes the warranty of non-infringement of any third-party rights.
 * 
 * This program is distributed WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * For details, see the GNU AGPL at: http://www.gnu.org/licenses/agpl-3.0.html
 * 
 * You can contact Ascensio System SIA at Lubanas st. 125a-25, Riga, Latvia, EU, LV-1021.
 * 
 * The interactive user interfaces in modified source and object code versions of the Program 
 * must display Appropriate Legal Notices, as required under Section 5 of the GNU AGPL version 3.
 * 
 * Pursuant to Section 7(b) of the License you must retain the original Product logo when distributing the program. 
 * Pursuant to Section 7(e) we decline to grant you any rights under trademark law for use of our trademarks.
 * 
 * All the Product's GUI elements, including illustrations and icon sets, as well as technical 
 * writing content are licensed under the terms of the Creative Commons Attribution-ShareAlike 4.0 International. 
 * See the License terms at http://creativecommons.org/licenses/by-sa/4.0/legalcode
 * 
*/

#region Import

using System;
using System.Runtime.Serialization;
using ASC.CRM.Core;
using ASC.Web.Core.Utility.Settings;

#endregion

namespace ASC.Web.CRM.Classes
{
    [Serializable]
    [DataContract]
    public class SMTPServerSetting
    {

        public SMTPServerSetting()
        {
            Host = String.Empty;
            Port = 0;
            EnableSSL = false;
            RequiredHostAuthentication = false;
            HostLogin = String.Empty;
            HostPassword = String.Empty;
            SenderDisplayName = String.Empty;
            SenderEmailAddress = String.Empty;
        }

        [DataMember]
        public String Host { get; set; }

        [DataMember]
        public int Port { get; set; }

        [DataMember]
        public bool EnableSSL { get; set; }

        [DataMember]
        public bool RequiredHostAuthentication { get; set; }

        [DataMember]
        public String HostLogin { get; set; }

        [DataMember]
        public String HostPassword { get; set; }

        [DataMember]
        public String SenderDisplayName { get; set; }

        [DataMember]
        public String SenderEmailAddress { get; set; }

    }

    [Serializable]
    [DataContract]
    public class InvoiceSetting
    {
        public InvoiceSetting()
        {
            Autogenerated = false;
            Prefix = String.Empty;
            Number = String.Empty;
            Terms = String.Empty;
        }

        public static InvoiceSetting DefaultSettings
        {
            get
            {
                return new InvoiceSetting
                    {
                        Autogenerated = true,
                        Prefix = "INV-",
                        Number = "0000001",
                        Terms = String.Empty,
                        CompanyName = String.Empty,
                        CompanyLogoID = 0,
                        CompanyAddress = String.Empty
                    };
            }
        }

        [DataMember]
        public bool Autogenerated { get; set; }

        [DataMember]
        public String Prefix { get; set; }

        [DataMember]
        public String Number { get; set; }

        [DataMember]
        public String Terms { get; set; }

        [DataMember]
        public String CompanyName { get; set; }

        [DataMember]
        public Int32 CompanyLogoID { get; set; }

        [DataMember]
        public String CompanyAddress { get; set; }
    }


    [Serializable]
    [DataContract]
    public class CRMSettings : ISettings
    {
        [DataMember(Name = "DefaultCurrency")]
        private string defaultCurrency;

        [DataMember]
        public SMTPServerSetting SMTPServerSetting { get; set; }

        [DataMember]
        public InvoiceSetting InvoiceSetting { get; set; }

        [DataMember]
        public Guid WebFormKey { get; set; }

        public Guid ID
        {
            get { return new Guid("fdf39b9a-ec96-4eb7-aeab-63f2c608eada"); }
        }

        public CurrencyInfo DefaultCurrency
        {
            get { return CurrencyProvider.Get(defaultCurrency); }
            set { defaultCurrency = value.Abbreviation; }
        }

        [DataMember(Name = "ChangeContactStatusGroupAuto")]
        public string ChangeContactStatusGroupAutoWrapper { get; set; }

        [IgnoreDataMember]
        public Boolean? ChangeContactStatusGroupAuto
        {
            get { return string.IsNullOrEmpty(ChangeContactStatusGroupAutoWrapper) ? null : (bool?)bool.Parse(ChangeContactStatusGroupAutoWrapper); }
            set { ChangeContactStatusGroupAutoWrapper = value.HasValue ? value.Value.ToString().ToLowerInvariant() : null; }
        }

        [DataMember(Name = "AddTagToContactGroupAuto")]
        public string AddTagToContactGroupAutoWrapper { get; set; }

        [IgnoreDataMember]
        public Boolean? AddTagToContactGroupAuto
        {
            get { return string.IsNullOrEmpty(AddTagToContactGroupAutoWrapper) ? null : (bool?)bool.Parse(AddTagToContactGroupAutoWrapper); }
            set { AddTagToContactGroupAutoWrapper = value.HasValue ? value.Value.ToString().ToLowerInvariant() : null; }
        }

        [DataMember(Name = "WriteMailToHistoryAuto")]
        public Boolean WriteMailToHistoryAuto { get; set; }

        [DataMember(Name = "IsConfiguredPortal")]
        public bool IsConfiguredPortal { get; set; }

        public ISettings GetDefault()
        {
            var languageName = System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName;

            var findedCurrency = CurrencyProvider.GetAll().Find(item => String.Compare(item.CultureName, languageName, true) == 0);

            return new CRMSettings
                        {
                            defaultCurrency = findedCurrency != null ? findedCurrency.Abbreviation : "USD",
                            IsConfiguredPortal = false,
                            ChangeContactStatusGroupAuto = null,
                            AddTagToContactGroupAuto = null,
                            WriteMailToHistoryAuto = false,
                            WebFormKey = Guid.Empty,
                            SMTPServerSetting = new SMTPServerSetting(),
                            InvoiceSetting = InvoiceSetting.DefaultSettings
                        };
        }
    }
}